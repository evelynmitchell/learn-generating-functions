<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-25T20:16:10-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Exploring Generating Functions</title><subtitle>I learn how to think about and work with generating functions.
</subtitle><author><name>Jeffrey S. Haemer</name><email>jeffrey.haemer@gmail.com</email></author><entry><title type="html">Moving Forward With Themes</title><link href="http://localhost:4000/2024/06/25/Moving-Forward-With-Themes.html" rel="alternate" type="text/html" title="Moving Forward With Themes" /><published>2024-06-25T00:00:00-06:00</published><updated>2024-06-25T00:00:00-06:00</updated><id>http://localhost:4000/2024/06/25/Moving-Forward-With-Themes</id><content type="html" xml:base="http://localhost:4000/2024/06/25/Moving-Forward-With-Themes.html"><![CDATA[<p>Finally! A theme that works.</p>

<h1 id="what-i-figured-out">What I figured out.</h1>

<p>GitHub lets me use LaTeX to write equations inside of markdown, but Jekyll doesn’t, at least by default.
I was able to stick in equations and have them display fine in my browser, while I was looking at the GitHub repo,
but when I turned them into static pages, all I saw was the LaTeX source.</p>

<p>Ugh.</p>

<p>I had to take the time to understand more about Jekyll, fork <code class="language-plaintext highlighter-rouge">jekyll/minima</code>, modify it to handle LaTeX through MathJax,
then have this blog specify <code class="language-plaintext highlighter-rouge">remote_theme: jsh/minima</code> (my forked and modified version), instead of <code class="language-plaintext highlighter-rouge">theme: minima</code>
in <code class="language-plaintext highlighter-rouge">_config.yml</code>.</p>

<p>I now know enough to make a much nicer theme, but I want to move forward. I can always come back to tweaking the theme.</p>

<p>I’ll take a few moments to improve <code class="language-plaintext highlighter-rouge">_config.yml</code> by tweaking some settings I learned about along the way, but then go back to blogging
about generating functions.</p>

<p>Somehow, my skin and my about.md pages are being ignored, but a step at a time.
Ah, and now I’m not pulling in the remote theme. Sigh.</p>

<p>Okay, back to the drawing board and I’ll do it the hard way.
I’ll copy the jekyll/minima theme, piece by piece, not use a remote theme at all, get it to work on my laptop, then substitute my own content,
and commit a working result.</p>

<p>I’ll use a giant hammer: brute force.</p>]]></content><author><name>Jeffrey S. Haemer</name><email>jeffrey.haemer@gmail.com</email></author><summary type="html"><![CDATA[Finally! A theme that works.]]></summary></entry><entry><title type="html">Exploring The MMM1 Text</title><link href="http://localhost:4000/2024/06/17/Exploring-The-MMM1-Text.html" rel="alternate" type="text/html" title="Exploring The MMM1 Text" /><published>2024-06-17T00:00:00-06:00</published><updated>2024-06-17T00:00:00-06:00</updated><id>http://localhost:4000/2024/06/17/Exploring-The-MMM1-Text</id><content type="html" xml:base="http://localhost:4000/2024/06/17/Exploring-The-MMM1-Text.html"><![CDATA[<p>I’ll start by browsing Mike Zabrocki’s MMM1 (Mini-Mathematical Monographs), on Ordinary Generating Functions (OGFs). I’ll call it a book, even though it’s on-line and only sixty-two pages – five chapters.</p>

<p>He’s exploring himself, and the book has some associated videos.
I can only try to judge whether it works for me.</p>

<h2 id="chapter-1-introduction">Chapter 1: Introduction</h2>

<p>He sketches the required background, which I think I have.</p>

<ul>
  <li>I’m comfy with basic, high-school algebra.</li>
  <li>I can manipulate elementary functions: sin, cos, exponentials, logs, etc.</li>
  <li>I know summation notation, and I’m not frightened by infinite series</li>
  <li>I can differentiate and integrate, as long as it’s not too sophisticated.</li>
</ul>

<p>Good enough.</p>

<h2 id="chapter-2-generating-functions-neither-generate-nor-are-they-functions">Chapter 2: Generating Functions Neither Generate, Nor Are They Functions.</h2>

<p>I have to admit I love the chapter title.</p>

<p>Generating functions are formal polynomials. There’s no notion so far of taking them seriously as functions, but I’ve read that such polynomials can just be thought of as a <em>ring</em>, which is basically a field without guaranteed inverses or commutativity.</p>

<p>In other words, you can add, subtract, and multiply them. Polynomial multiplication actually is commutative, so I’d guess they only aren’t a field because some don’t have inverses.</p>

<p>The coefficients of the polynomial terms are the elements of the series.</p>

<p>For now, I see OGFs as a notational convenience.</p>

<p>An example would help, here, but before I go farther, I need to find out is whether I can write equations
in blogposts. If not, it’s going to be tough to blog about generating functions.</p>

<h3 id="can-i-write-equations-using-markdown">Can I Write Equations Using Markdown?</h3>

<p>I’ll try a sample example. Let’s start with the constant sequence \(1,1,1,1,...\)
The generating function for this is \(1+x+x^2+x^3+...\), each coefficient of \(x^n\) being \(1\) .
I could write that as \(f(x) = \sum_{n=0}^{\infty} x^n\)
or, more compactly, as \(f(x) = 1/(1-x)\)</p>

<p>Okey doke, I can use LaTex for equations. Surrounding an equation with ‘$’ displays it correctly; surrounding it with ‘$$’ puts the equation on its own line. Yay.</p>

<p>I’ll need more fluency in LaTex, but that’s within reach.</p>

<h3 id="back-to-ogfs">Back to OGFs</h3>

<p>Thus, even though \(f(x)=1/(1-x)\) blows up when \(x=0\), and \(f(x)=\sum_{n=0}^{\infty} x^n\) diverges if \(x \geq 1\), I can use the compact form, unambiguously, to stand for the series \(1,1,1,...\) and even manipulate it in useful ways.</p>

<p>Useful how? I’ll have to read some more, then post again.</p>

<h3 id="oh-argh">Oh, argh.</h3>

<p>After deploying this post, I showed it to Jeff Wright in a screen share on a Zoom call.</p>

<p>And the equations didn’t display correctly. Feh.</p>

<p>GitHub itself interprets them correctly, but perhaps Jekyll gets confused.
Now I have to back up and figure out how to get equations that display correctly in GitHub Markdown to display correctly in a compiled, deployed page.</p>

<p>Back to the drawing board.</p>

<h3 id="25-june-2024-aaaaah-that-feels-much-better">25 June 2024. Aaaaah. That feels <em>much</em> better.</h3>

<p>Okey doke. Now I have a theme that displays equations. I can move forward.</p>]]></content><author><name>Jeffrey S. Haemer</name><email>jeffrey.haemer@gmail.com</email></author><summary type="html"><![CDATA[I’ll start by browsing Mike Zabrocki’s MMM1 (Mini-Mathematical Monographs), on Ordinary Generating Functions (OGFs). I’ll call it a book, even though it’s on-line and only sixty-two pages – five chapters.]]></summary></entry><entry><title type="html">Playing With Sage</title><link href="http://localhost:4000/2024/06/16/Playing-With-Sage.html" rel="alternate" type="text/html" title="Playing With Sage" /><published>2024-06-16T00:00:00-06:00</published><updated>2024-06-16T00:00:00-06:00</updated><id>http://localhost:4000/2024/06/16/Playing-With-Sage</id><content type="html" xml:base="http://localhost:4000/2024/06/16/Playing-With-Sage.html"><![CDATA[<p>Many tutorials I peeked at, including the pair I link to in the <a href="2024-06-16-Tutorial-Material.md">Tutorial Material post</a>, encourage using computer-algebra systems.</p>

<p>I saw my first, four-function calculator – add, subtract, multiply, and divide – in graduate school, so using computer tools to solve math problems doesn’t come naturally to me. Yet.</p>

<p>Doing math by hand helps me learn, but it can be tedious and error-prone. My goal is to learn how to use generating functions, not to solve differential equations or quadratics. Getting comfy with some sort of computer-algebra system seems like a legitimate, just-in-time (JIT) learning step.</p>

<p>Ah, but which one?</p>

<p>A little googling points me at Sage Math, which is open-source, mature, and probably best-of-breed. <a href="https://doc.sagemath.org/html/en/tutorial/index.html">The Sage Tutorial</a> says, “The overall goal of Sage is to create a viable, free, open-source alternative to Maple, Mathematica, Magma, and MATLAB.”</p>

<p>There is, I learned, a distinction between computer-algebra systems and a numeric computing package. Tools like MATLAB provide a numeric computing environment, including a proprietary programming language. They’re optimized for doing calculations and displaying results – the same sorts of jobs you might do in Python with NumPy and SciPy. I think. I’m unsure because I don’t know much about any of these, either.</p>

<p>Sage, on the other hand, is written in Python, a familiar language, and it focuses on things like combinatorics and symbolic algebra. You can use it to take a derivative of a function,solve a differential equation, do a Taylor expansion, simplify a polynomial, ….</p>

<p><em>That’s</em> what I want.</p>

<p>I don’t really want to stop and work through a loooong tutorial – again, my interest is in generating functions, not tools – but I can start off picking up a lot of what I want just by figuring out how to use Sage to verify solutions I’ve calculated by hand. Zabrocki’s little book embeds Sage examples, so I can start by typing those in.</p>

<p>I don’t even have to install Sage on my own computer. <a href="https://sagecell.sagemath.org/">SageMathCell</a> evaluates any Sage commands that I type in, and feels very Jupyter-notebook-y. Like Python, I’ve used Jupyter notebooks, so I’m not facing yet another tool I have to pause and learn before I can move forward. My JIT-learning stack isn’t growing without bounds.</p>]]></content><author><name>Jeffrey S. Haemer</name><email>jeffrey.haemer@gmail.com</email></author><summary type="html"><![CDATA[Many tutorials I peeked at, including the pair I link to in the Tutorial Material post, encourage using computer-algebra systems.]]></summary></entry><entry><title type="html">Tutorial Material</title><link href="http://localhost:4000/2024/06/16/Tutorial-Material.html" rel="alternate" type="text/html" title="Tutorial Material" /><published>2024-06-16T00:00:00-06:00</published><updated>2024-06-16T00:00:00-06:00</updated><id>http://localhost:4000/2024/06/16/Tutorial-Material</id><content type="html" xml:base="http://localhost:4000/2024/06/16/Tutorial-Material.html"><![CDATA[<p>When I looked for tutorial material on generating functions, I found plenty.</p>

<p>There’s universal consensus that the best book is Herbert Wilf’s <em>generatingfunctionology</em>. <a href="https://www2.math.upenn.edu/~wilf/DownldGF.html">The second edition is free, on-line</a>, but I wanted something I could touch. I bought a <a href="https://www.amazon.com/generatingfunctionology-Third-Herbert-S-Wilf/dp/1568812795/ref=sr_1_1?dib=eyJ2IjoiMSJ9.W5lxPqUwhyp0LFS6zQhMQzIZ7oEUoT6rzGe5Ne0386RuO35dCiNFLh-2mIIs5uoKuHlTi44XIknHqCRLkhhuWw.rEr7Bze20Fj45Ksg6pSnE_NFmYMtKXhxMQL7EDAl2vU&amp;dib_tag=se&amp;keywords=generating+functionology&amp;qid=1718573404&amp;sr=8-1">hardback, third edition</a>, which appeared on my doorstep 19 hours after I ordered it from Amazon.</p>

<p>I read recently that the FAA is giving approval for drone deliveries from Amazon, and Melody Childs tells me that she’s already had one drone delivery from them. Perhaps my next book from them will arrive even faster.</p>

<p>There are, of course, plenty of YouTube videos and other on-line materials, too, each of which has plusses and minuses. One I like is <a href="https://garsia.math.yorku.ca/~zabrocki/MMM1/MMM1Intro2OGFs.pdf"><em>An Introduction to Ordinary Generating Functions</em></a>, by Mike Zabrocki. It’s a fifty-two page, on-line book including exercises. Not too deep or detailed, it feels like it’s presenting the material at a resonable pace for me.</p>]]></content><author><name>Jeffrey S. Haemer</name><email>jeffrey.haemer@gmail.com</email></author><summary type="html"><![CDATA[When I looked for tutorial material on generating functions, I found plenty.]]></summary></entry><entry><title type="html">Creating The Blog</title><link href="http://localhost:4000/2024/06/15/Creating-The-Blog.html" rel="alternate" type="text/html" title="Creating The Blog" /><published>2024-06-15T00:00:00-06:00</published><updated>2024-06-15T00:00:00-06:00</updated><id>http://localhost:4000/2024/06/15/Creating-The-Blog</id><content type="html" xml:base="http://localhost:4000/2024/06/15/Creating-The-Blog.html"><![CDATA[<p>First step: Actually creating the blog.</p>

<p>I’m making the blog on GitHub pages because it’s a natural place to put it.</p>

<p>I already know some Git, so I’m comfy with that aspect,
and this gives me a chance to find out more about what GitHub offers.</p>

<p>I went through GitHub’s tutorial, to create <a href="https://jsh.github.io/skills-github-pages">a little, test blog</a>,
then went back and repeated the process, with tweaks, to create <a href="https://jsh.github.io/learn-generating-functions">this blog</a>.
These meant trying out GitHub pages <em>and</em> GitHub actions, struggling through all the expected mistakes, and even playing with jeckyll themes.</p>

<p>I think the blog is working now, so I’ll delete my earlier test posts, commit this one, debug it, and finally merge into master.</p>]]></content><author><name>Jeffrey S. Haemer</name><email>jeffrey.haemer@gmail.com</email></author><summary type="html"><![CDATA[First step: Actually creating the blog.]]></summary></entry></feed>